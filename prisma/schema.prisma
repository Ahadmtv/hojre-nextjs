// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

// auth section //

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  address               String?
  postCode              Int?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactor           Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  cart                  Cart[]
}

model Cart {
  id       String  @id @default(cuid())
  name     String?
  image    String?
  price    Int?
  color    String?
  quantity Int?
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verivicationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token])
}

model resetPasswordToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token])
}

model twoFactorToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires_at DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// main section //

model Products {
  id           String @id @default(cuid())
  category     String
  name         String
  seller       String
  price        Int
  stock        Int
  ratings      Int
  ratingsCount Int
  img          String
  shipping     Int
  quantity     Int

  @@unique([id])
}

model Blogs {
  id           String     @id @default(cuid())
  imgUrl       String
  imgAlt       String
  title        String
  desc         String
  commentCount String
  btnText      String
  metaList     MetaList[]
}

model MetaList {
  id       String @id @default(cuid())
  iconName String
  text     String
  blogsid  String
  blogs    Blogs  @relation(fields: [blogsid], references: [id])
}

model CountList {
  id       String @id
  iconName String
  count    String
  text     String
  color    String
}

model SponsorList {
  id     String @id
  imgUrl String
}

model CatHome {
  id       String @id
  imgUrl   String
  iconName String
  title    String
}

model ProductReview {
  id     String @id
  imgUrl String
  imgAlt String
  name   String
  date   String
  desc   String
}

model TopPosts {
  id     String @id
  imgUrl String
  imgAlt String
  title  String
  date   String
}

model TopTags {
  id   String @id
  link String
  text String
}
